name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup SBCL and ocicl
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew install sbcl ocicl dejagnu
        ocicl setup >> ~/.sbclrc
        patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 --set-rpath /lib64 /home/linuxbrew/.linuxbrew/Cellar/sbcl/*/libexec/bin/sbcl

    - run: |
        git fetch --prune --unshallow --tags
        echo exit code $?
        git tag --list
        echo "RLGL_VERSION=$(git describe --tags --dirty=+)"

    - name: Install dependencies
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        ocicl install

    - name: Build
      run: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        make binary

    - name: Set up Go 1.17
      uses: actions/setup-go@v3
      with:
        go-version: 1.17

    - name: Get short git commit hash
      id: hash
      run: echo "::set-output name=hash::${GITHUB_SHA::7}"

    - name: Get version number
      id: version
      run: echo "::set-output name=version::$(git describe --tags --dirty=+)"

    - name: Build rlgl cli
      run: |
        (cd rlgl; make build)
        mv rlgl/build/* cli

    - name: Build test container
      uses: redhat-actions/buildah-build@v2
      with:
        image: rlgl-server
        tags: latest ${{ steps.hash.outputs.hash }} ${{ steps.version.outputs.version }}
        dockerfiles: |
          .ci/Containerfile

    - name: Test
      run: |
        # Create a new test keypair
        openssl ecparam -name prime256v1 -genkey -noout -out .ci/private_key.pem
        openssl ec -in .ci/private_key.pem -pubout -out .ci/public_key.pem

        pip3 install podman-compose
        podman-compose -f .ci/docker-compose.yml up -d
        ip=$(podman container inspect --format '{{ (index .NetworkSettings.Networks "ci_default").IPAddress }}' ci_rlgl-server_1)
        if [ -z "${ip:-}" ]; then
            err "Container ${cid} has no IP address"
            return 1
        fi

        if timeout -s TERM 45 bash -c \
                  'while [[ "$(curl -s -o /dev/null -L -w ''%{http_code}'' ${0})" != "200" ]];\
                      do echo "Waiting for ${0}" && sleep 2;\
                       done' http://$ip:8080/healthz ; then

          podman exec -t -e IP=$ip ci_rlgl-server_1 sh -c 'echo -n http://$IP:8080 > /tmp/server-uri'
          podman exec -t ci_rlgl-server_1 cat /tmp/server-uri

          ./.ci/test.sh $ip:8080 || true

          podman logs ci_rlgl-server_1

        else

          ERROR=$?
          podman logs ci_rlgl-server_1
          exit $ERROR

        fi
