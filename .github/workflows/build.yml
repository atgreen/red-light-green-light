name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  GO_VERSION: '1.17'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git describe

      - name: Setup Homebrew environment
        run: eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

      - name: Install system dependencies
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install sbcl ocicl dejagnu
          ocicl setup >> ~/.sbclrc
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 \
                   --set-rpath /lib64 \
                   /home/linuxbrew/.linuxbrew/Cellar/sbcl/*/libexec/bin/sbcl

      - name: Get version info
        id: version
        run: |
          git fetch --prune --tags
          VERSION=$(git describe --tags --dirty=+)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "RLGL_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"

      - name: Install project dependencies
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          ocicl install

      - name: Build binary
        run: |
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          make binary

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get commit hash
        id: hash
        run: echo "hash=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build CLI
        run: |
          cd rlgl && make build
          mv build/* ../cli/

      - name: Build container image
        uses: redhat-actions/buildah-build@v2
        with:
          image: rlgl-server
          tags: |
            latest
            ${{ steps.hash.outputs.hash }}
            ${{ steps.version.outputs.version }}
          dockerfiles: .ci/Containerfile

      - name: Generate test keys
        run: |
          openssl ecparam -name prime256v1 -genkey -noout -out .ci/private_key.pem
          openssl ec -in .ci/private_key.pem -pubout -out .ci/public_key.pem

      - name: Setup test environment
        run: |
          pip3 install podman-compose
          podman-compose -f .ci/docker-compose.yml up -d

      - name: Run tests
        run: |
          # Get container IP
          CONTAINER_IP=$(podman container inspect \
            --format '{{ (index .NetworkSettings.Networks "ci_default").IPAddress }}' \
            ci_rlgl-server_1)

          if [ -z "$CONTAINER_IP" ]; then
            echo "ERROR: Container has no IP address"
            exit 1
          fi

          echo "Container IP: $CONTAINER_IP"

          # Wait for service to be ready
          if timeout -s TERM 45 bash -c \
             'while [[ "$(curl -s -o /dev/null -L -w ''%{http_code}'' ${0})" != "200" ]];\
                  do echo "Waiting for ${0}" && sleep 2;\
                    done' http://$ip:8080/healthz ; then

            # Setup test environment in container
            podman exec -t -e IP="$CONTAINER_IP" ci_rlgl-server_1 \
              sh -c 'echo -n "http://$IP:8080" > /tmp/server-uri'

            SERVER_URI=$(podman exec -t ci_rlgl-server_1 cat /tmp/server-uri)
            echo "Server URI: $SERVER_URI"

            # Run tests
            ./.ci/test.sh "$CONTAINER_IP:8080" || TEST_FAILED=true

            # Always show logs
            podman logs ci_rlgl-server_1

            if [ "$TEST_FAILED" = "true" ]; then
              exit 1
            fi
          else
            echo "ERROR: Service failed to start within timeout"
            podman logs ci_rlgl-server_1
            exit 1
          fi
